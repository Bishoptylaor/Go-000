// Code generated by protoc-gen-go. DO NOT EDIT.
// source: TestCase.proto

package testcase

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EchoReq struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoReq) Reset()         { *m = EchoReq{} }
func (m *EchoReq) String() string { return proto.CompactTextString(m) }
func (*EchoReq) ProtoMessage()    {}
func (*EchoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82ebbb457b80c84a, []int{0}
}

func (m *EchoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoReq.Unmarshal(m, b)
}
func (m *EchoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoReq.Marshal(b, m, deterministic)
}
func (m *EchoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoReq.Merge(m, src)
}
func (m *EchoReq) XXX_Size() int {
	return xxx_messageInfo_EchoReq.Size(m)
}
func (m *EchoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoReq.DiscardUnknown(m)
}

var xxx_messageInfo_EchoReq proto.InternalMessageInfo

func (m *EchoReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type EchoData struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoData) Reset()         { *m = EchoData{} }
func (m *EchoData) String() string { return proto.CompactTextString(m) }
func (*EchoData) ProtoMessage()    {}
func (*EchoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_82ebbb457b80c84a, []int{1}
}

func (m *EchoData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoData.Unmarshal(m, b)
}
func (m *EchoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoData.Marshal(b, m, deterministic)
}
func (m *EchoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoData.Merge(m, src)
}
func (m *EchoData) XXX_Size() int {
	return xxx_messageInfo_EchoData.Size(m)
}
func (m *EchoData) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoData.DiscardUnknown(m)
}

var xxx_messageInfo_EchoData proto.InternalMessageInfo

func (m *EchoData) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type EchoRes struct {
	Errinfo              string `protobuf:"bytes,1,opt,name=errinfo,proto3" json:"errinfo"`
	Data                 *EchoData         `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EchoRes) Reset()         { *m = EchoRes{} }
func (m *EchoRes) String() string { return proto.CompactTextString(m) }
func (*EchoRes) ProtoMessage()    {}
func (*EchoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_82ebbb457b80c84a, []int{2}
}

func (m *EchoRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRes.Unmarshal(m, b)
}
func (m *EchoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRes.Marshal(b, m, deterministic)
}
func (m *EchoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRes.Merge(m, src)
}
func (m *EchoRes) XXX_Size() int {
	return xxx_messageInfo_EchoRes.Size(m)
}
func (m *EchoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRes.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRes proto.InternalMessageInfo

func (m *EchoRes) GetErrinfo() string {
	if m != nil {
		return m.Errinfo
	}
	return ""
}

func (m *EchoRes) GetData() *EchoData {
	if m != nil {
		return m.Data
	}
	return nil
}

// 修复接口
type HotFixReq struct {
	Handler              string   `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HotFixReq) Reset()         { *m = HotFixReq{} }
func (m *HotFixReq) String() string { return proto.CompactTextString(m) }
func (*HotFixReq) ProtoMessage()    {}
func (*HotFixReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82ebbb457b80c84a, []int{3}
}

func (m *HotFixReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HotFixReq.Unmarshal(m, b)
}
func (m *HotFixReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HotFixReq.Marshal(b, m, deterministic)
}
func (m *HotFixReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotFixReq.Merge(m, src)
}
func (m *HotFixReq) XXX_Size() int {
	return xxx_messageInfo_HotFixReq.Size(m)
}
func (m *HotFixReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HotFixReq.DiscardUnknown(m)
}

var xxx_messageInfo_HotFixReq proto.InternalMessageInfo

func (m *HotFixReq) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

type HotFixData struct {
	Payload              string   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HotFixData) Reset()         { *m = HotFixData{} }
func (m *HotFixData) String() string { return proto.CompactTextString(m) }
func (*HotFixData) ProtoMessage()    {}
func (*HotFixData) Descriptor() ([]byte, []int) {
	return fileDescriptor_82ebbb457b80c84a, []int{4}
}

func (m *HotFixData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HotFixData.Unmarshal(m, b)
}
func (m *HotFixData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HotFixData.Marshal(b, m, deterministic)
}
func (m *HotFixData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotFixData.Merge(m, src)
}
func (m *HotFixData) XXX_Size() int {
	return xxx_messageInfo_HotFixData.Size(m)
}
func (m *HotFixData) XXX_DiscardUnknown() {
	xxx_messageInfo_HotFixData.DiscardUnknown(m)
}

var xxx_messageInfo_HotFixData proto.InternalMessageInfo

func (m *HotFixData) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type HotFixRes struct {
	Errinfo              string `protobuf:"bytes,1,opt,name=errinfo,proto3" json:"errinfo"`
	Data                 *HotFixData       `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HotFixRes) Reset()         { *m = HotFixRes{} }
func (m *HotFixRes) String() string { return proto.CompactTextString(m) }
func (*HotFixRes) ProtoMessage()    {}
func (*HotFixRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_82ebbb457b80c84a, []int{5}
}

func (m *HotFixRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HotFixRes.Unmarshal(m, b)
}
func (m *HotFixRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HotFixRes.Marshal(b, m, deterministic)
}
func (m *HotFixRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotFixRes.Merge(m, src)
}
func (m *HotFixRes) XXX_Size() int {
	return xxx_messageInfo_HotFixRes.Size(m)
}
func (m *HotFixRes) XXX_DiscardUnknown() {
	xxx_messageInfo_HotFixRes.DiscardUnknown(m)
}

var xxx_messageInfo_HotFixRes proto.InternalMessageInfo

func (m *HotFixRes) GetErrinfo() string {
	if m != nil {
		return m.Errinfo
	}
	return ""
}

func (m *HotFixRes) GetData() *HotFixData {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*EchoReq)(nil), "testcase.EchoReq")
	proto.RegisterType((*EchoData)(nil), "testcase.EchoData")
	proto.RegisterType((*EchoRes)(nil), "testcase.EchoRes")
	proto.RegisterType((*HotFixReq)(nil), "testcase.HotFixReq")
	proto.RegisterType((*HotFixData)(nil), "testcase.HotFixData")
	proto.RegisterType((*HotFixRes)(nil), "testcase.HotFixRes")
}

func init() { proto.RegisterFile("HotFix.proto", fileDescriptor_82ebbb457b80c84a) }

var fileDescriptor_82ebbb457b80c84a = []byte{
	// 2496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x4b, 0x93, 0x1b, 0xb7,
	0x11, 0xf6, 0x0c, 0xc9, 0x5d, 0xb2, 0xb5, 0x5a, 0xd1, 0xd8, 0x87, 0xb9, 0x94, 0x65, 0xcb, 0xa3,
	0xa7, 0xa5, 0x58, 0xd6, 0x23, 0x2f, 0x27, 0x71, 0xc5, 0xd2, 0xae, 0xb4, 0xde, 0x78, 0x25, 0x57,
	0x8d, 0xd6, 0xd1, 0x21, 0x15, 0x6d, 0x8d, 0x38, 0x58, 0x72, 0xb4, 0xe4, 0x80, 0x9a, 0x01, 0x65,
	0x31, 0xa7, 0x54, 0xca, 0x95, 0x4a, 0xa5, 0x2a, 0x8e, 0x0f, 0xb9, 0xe4, 0x92, 0xdf, 0x93, 0x43,
	0xfe, 0x44, 0xaa, 0xf2, 0x27, 0x72, 0x4b, 0xa1, 0x81, 0x19, 0xce, 0x03, 0x43, 0xce, 0x52, 0xa2,
	0x73, 0x23, 0x80, 0x1e, 0x74, 0x7f, 0x1f, 0x1a, 0x0d, 0xa0, 0x9b, 0xb0, 0xf1, 0xd0, 0x09, 0x8e,
	0x29, 0xdf, 0x66, 0x83, 0x21, 0xf3, 0xa9, 0xcf, 0x6f, 0x0c, 0x03, 0xc6, 0x19, 0x39, 0x33, 0xc0,
	0xee, 0x4e, 0xd4, 0xdd, 0x5e, 0xdd, 0x0d, 0x86, 0x9d, 0xaf, 0xb8, 0xd7, 0x97, 0x02, 0xd6, 0x16,
	0x2c, 0xdf, 0xef, 0xf4, 0x98, 0x4d, 0x5f, 0x90, 0x55, 0x30, 0x3d, 0xb7, 0x65, 0x9c, 0x37, 0xae,
	0xd6, 0x6c, 0xd3, 0x73, 0xad, 0x36, 0xd4, 0xc5, 0xd0, 0x8e, 0xc3, 0x9d, 0xdc, 0xd8, 0xf3, 0xe8,
	0xb3, 0x90, 0xdc, 0x84, 0x65, 0x1a, 0x04, 0x9e, 0x7f, 0xc4, 0x70, 0xfc, 0xd4, 0xed, 0xcd, 0x1b,
	0x23, 0x31, 0x7f, 0x37, 0x18, 0x76, 0xf0, 0xc7, 0xfd, 0x20, 0xd8, 0xf3, 0x8f, 0x98, 0x1d, 0x89,
	0x91, 0x8f, 0xa0, 0xea, 0x3a, 0xdc, 0x69, 0x99, 0x28, 0xbe, 0x75, 0x23, 0x63, 0xe3, 0x8d, 0x48,
	0xab, 0x8d, 0x62, 0xd6, 0x25, 0x68, 0x7c, 0xce, 0xf8, 0x03, 0xef, 0x95, 0x30, 0xb2, 0x05, 0xcb,
	0x3d, 0xc7, 0x77, 0xfb, 0x34, 0x40, 0x6d, 0x0d, 0x3b, 0x6a, 0x5a, 0x97, 0x01, 0xa4, 0x18, 0x1a,
	0xdc, 0x82, 0xe5, 0xa1, 0x33, 0xee, 0x33, 0xc7, 0x8d, 0xe4, 0x54, 0xd3, 0xf2, 0x27, 0xd3, 0xcd,
	0x63, 0xfc, 0xc7, 0x29, 0xe3, 0xcf, 0xe6, 0x8c, 0x9f, 0xd8, 0xa0, 0xcc, 0xef, 0x03, 0xd9, 0xa5,
	0xfc, 0xcb, 0x21, 0x0d, 0x1c, 0xee, 0x31, 0x7f, 0x9f, 0x75, 0x05, 0x8e, 0x75, 0xa8, 0x05, 0xec,
	0x6b, 0xc5, 0x69, 0xc5, 0x96, 0x0d, 0x42, 0xa0, 0xca, 0x8f, 0xe9, 0x18, 0x27, 0x6f, 0xd8, 0xf8,
	0x9b, 0x6c, 0xc2, 0x12, 0x3b, 0x3a, 0x0a, 0x29, 0x6f, 0x55, 0x90, 0x7e, 0xd5, 0x12, 0x33, 0xf4,
	0xbd, 0x81, 0xc7, 0x5b, 0x55, 0xec, 0x96, 0x0d, 0xeb, 0x09, 0xac, 0x65, 0xb4, 0x21, 0x1d, 0x93,
	0x49, 0xcc, 0xd4, 0x24, 0x04, 0xaa, 0x03, 0x16, 0x50, 0x9c, 0xba, 0x6e, 0xe3, 0x6f, 0x31, 0x31,
	0x67, 0xdc, 0xe9, 0x47, 0x13, 0x63, 0xc3, 0xfa, 0xbd, 0xa1, 0xc1, 0x31, 0x0f, 0x81, 0x3f, 0x4d,
	0x11, 0x78, 0x31, 0x47, 0xa0, 0xc6, 0x7c, 0xc5, 0xe4, 0x3f, 0x4c, 0x80, 0xed, 0x1e, 0xed, 0x1c,
	0x7b, 0x62, 0x20, 0xe1, 0x93, 0x15, 0xe1, 0x93, 0xa2, 0xdd, 0x91, 0xf8, 0x2a, 0xb6, 0xd9, 0xe1,
	0xa2, 0x3d, 0x92, 0xa4, 0x55, 0x6c, 0x73, 0xc4, 0xc9, 0x7b, 0x00, 0x21, 0x77, 0x02, 0x1e, 0x72,
	0x67, 0x30, 0x44, 0x70, 0x15, 0x3b, 0xd1, 0x43, 0xda, 0x50, 0xa7, 0xbe, 0x2b, 0x47, 0x6b, 0x38,
	0x1a, 0xb7, 0xc9, 0x59, 0x68, 0x74, 0x98, 0x7f, 0xe4, 0x75, 0x0f, 0x3d, 0xb7, 0xb5, 0x24, 0x07,
	0x65, 0xc7, 0x9e, 0x4b, 0x9a, 0x50, 0x19, 0x79, 0x6e, 0x6b, 0x19, 0xbb, 0xc5, 0x4f, 0xe1, 0x7d,
	0xf4, 0x25, 0xf5, 0xb9, 0xe7, 0xb6, 0xea, 0xd8, 0x1b, 0x35, 0xc5, 0x42, 0xf4, 0x9d, 0x50, 0x0c,
	0x34, 0x70, 0x40, 0xb5, 0x44, 0x7f, 0xc8, 0x1d, 0x3e, 0x0a, 0x5b, 0x20, 0x17, 0x48, 0xb6, 0xc8,
	0x75, 0x78, 0xbb, 0xc3, 0xfc, 0x90, 0x0a, 0x32, 0x5f, 0xd2, 0xc3, 0x0e, 0x1b, 0xf9, 0xbc, 0x75,
	0x0a, 0x45, 0x9a, 0x89, 0x81, 0x6d, 0xd1, 0x6f, 0xfd, 0xd3, 0x80, 0x55, 0x45, 0xd0, 0x63, 0xea,
	0xbb, 0xf3, 0x90, 0xa4, 0xb0, 0x54, 0x27, 0x58, 0xda, 0xa0, 0x90, 0x7a, 0x6e, 0x44, 0x4b, 0xd4,
	0x46, 0x1f, 0x64, 0xdd, 0x98, 0x12, 0xd9, 0x10, 0x58, 0xba, 0xde, 0x11, 0x8f, 0x29, 0x51, 0xad,
	0x04, 0xc6, 0x7a, 0x0a, 0x23, 0x81, 0x6a, 0x9f, 0x75, 0x43, 0x64, 0xa4, 0x61, 0xe3, 0x6f, 0xeb,
	0x5f, 0x15, 0x38, 0xad, 0xa0, 0x6c, 0xa3, 0xb6, 0x13, 0x23, 0x99, 0x68, 0xab, 0xa6, 0xb4, 0xad,
	0x82, 0x19, 0x72, 0x85, 0xc4, 0x0c, 0xf1, 0x3b, 0xca, 0x15, 0x00, 0x93, 0x72, 0x72, 0x07, 0x6a,
	0x9d, 0x71, 0xa7, 0x4f, 0xd1, 0xf8, 0xd5, 0xdb, 0xe7, 0x72, 0x0e, 0x8a, 0x66, 0xed, 0xf9, 0xdb,
	0x42, 0xc8, 0x96, 0xb2, 0xe2, 0x23, 0x3e, 0x1e, 0x52, 0x89, 0x6c, 0xca, 0x47, 0x07, 0x42, 0xc8,
	0x96, 0xb2, 0xc2, 0xc2, 0x81, 0xe3, 0x8f, 0x9c, 0x3e, 0x22, 0xaf, 0xdb, 0xaa, 0x95, 0xf4, 0x1e,
	0xc8, 0x79, 0x8f, 0x62, 0xf6, 0x54, 0x8a, 0xd9, 0xf7, 0xe1, 0x54, 0x47, 0x92, 0x75, 0x28, 0xc2,
	0xc7, 0x0a, 0x12, 0x09, 0xaa, 0xeb, 0x0b, 0x3a, 0x16, 0x14, 0xfb, 0xce, 0x80, 0xb6, 0x4e, 0x4b,
	0x8a, 0xc5, 0x6f, 0xb2, 0x05, 0xf5, 0xa3, 0x80, 0x86, 0xbd, 0x43, 0x87, 0xb7, 0x56, 0x65, 0x8c,
	0xc4, 0xf6, 0x5d, 0x4e, 0xce, 0x01, 0xc8, 0x21, 0x61, 0x68, 0xeb, 0x0c, 0xf2, 0xd7, 0xc0, 0x1e,
	0x01, 0x80, 0xdc, 0x84, 0xf5, 0x48, 0x1d, 0xc2, 0x3f, 0xec, 0x53, 0xbf, 0xcb, 0x7b, 0xad, 0x26,
	0x0a, 0x12, 0x35, 0x86, 0x04, 0xed, 0xe3, 0x88, 0xd5, 0x85, 0xb5, 0xbb, 0xae, 0x9b, 0x5a, 0x50,
	0x11, 0x05, 0x6f, 0x43, 0xd5, 0xe3, 0x74, 0xa0, 0x42, 0xc7, 0x7b, 0x7a, 0xd6, 0xe2, 0x0f, 0x50,
	0x96, 0xbc, 0x0b, 0x0d, 0x36, 0x74, 0x3a, 0x72, 0x27, 0xc8, 0x40, 0x39, 0xe9, 0xb0, 0x7e, 0x05,
	0xeb, 0x59, 0x45, 0x18, 0x00, 0xe7, 0xd0, 0x64, 0xfd, 0xc1, 0xd0, 0x59, 0x3d, 0x4f, 0xcc, 0xfb,
	0x24, 0x15, 0xf3, 0x2e, 0xe5, 0xb4, 0xeb, 0x4c, 0x56, 0x41, 0xef, 0x39, 0x6c, 0x7e, 0x35, 0x74,
	0x1d, 0x4e, 0xbf, 0x07, 0xf2, 0x3e, 0x84, 0x77, 0x34, 0xba, 0xa2, 0x0b, 0x00, 0x3b, 0x46, 0x55,
	0x75, 0xdb, 0x64, 0xc7, 0xd6, 0x9f, 0x8c, 0x02, 0xbb, 0xe6, 0xa1, 0xe7, 0x17, 0x29, 0x7a, 0xae,
	0xe6, 0x90, 0x14, 0x18, 0xa5, 0x18, 0xda, 0x86, 0xb5, 0x1d, 0xda, 0xcf, 0xd1, 0x93, 0x8d, 0x17,
	0xd3, 0xa1, 0x5f, 0x86, 0xf5, 0xec, 0x24, 0x5a, 0xdc, 0xc2, 0x27, 0xf2, 0xda, 0x16, 0xe1, 0x13,
	0x3a, 0x73, 0x14, 0xe2, 0xa7, 0xb0, 0x79, 0xdf, 0x77, 0x9e, 0xf5, 0xe9, 0xeb, 0x81, 0x16, 0xe1,
	0x84, 0xe2, 0x3c, 0xea, 0xfc, 0x57, 0x2d, 0xe1, 0x07, 0x9a, 0xf9, 0x0b, 0xfd, 0x40, 0x6b, 0xcb,
	0x22, 0xfc, 0xa0, 0xc0, 0x28, 0xc5, 0xca, 0x03, 0xbc, 0xfa, 0xcc, 0xa4, 0x24, 0x13, 0x2b, 0xcd,
	0x6c, 0xac, 0x14, 0x21, 0x24, 0x3b, 0xcf, 0x6b, 0x85, 0x90, 0xbc, 0x51, 0x8b, 0x70, 0x17, 0x9d,
	0xc9, 0x8a, 0x98, 0x1d, 0x58, 0xdf, 0xf7, 0xc2, 0x3c, 0x33, 0x93, 0x4b, 0xa1, 0xa1, 0xbf, 0x59,
	0x9a, 0xc9, 0x9b, 0xe5, 0x5f, 0x0d, 0xd8, 0xc8, 0x4d, 0x83, 0xc4, 0xfc, 0x10, 0x6a, 0x02, 0x6c,
	0xd8, 0x32, 0xce, 0x57, 0x4a, 0x30, 0x23, 0x85, 0x0b, 0xaf, 0xa4, 0xf1, 0xf5, 0xb3, 0x92, 0xb8,
	0x7e, 0xc6, 0x17, 0xd5, 0xea, 0xe4, 0xa2, 0x6a, 0x7d, 0x63, 0x68, 0x81, 0xcd, 0xc3, 0xee, 0xcf,
	0x52, 0xec, 0x5e, 0xce, 0x21, 0xd0, 0x02, 0x57, 0xf4, 0x1e, 0x42, 0xe3, 0x81, 0x38, 0x1a, 0xc5,
	0x8c, 0x99, 0x93, 0xd3, 0xc8, 0x9e, 0x9c, 0xf1, 0x30, 0x9e, 0xc6, 0x6a, 0x43, 0x62, 0xcf, 0x23,
	0x71, 0x24, 0xaf, 0x43, 0x8d, 0xbe, 0xe2, 0x81, 0x83, 0xd8, 0x1b, 0xb6, 0x6c, 0x58, 0x2d, 0xd8,
	0x9c, 0xac, 0x6e, 0xac, 0xca, 0xa6, 0x2f, 0xac, 0x2f, 0xe0, 0x1d, 0xcd, 0x08, 0x2e, 0xca, 0xcd,
	0xf4, 0xa2, 0xb4, 0x73, 0x90, 0x26, 0x13, 0x49, 0x41, 0xdc, 0xca, 0x5a, 0x3d, 0x8b, 0xd8, 0xca,
	0x05, 0x66, 0xc7, 0x01, 0xee, 0xcc, 0x83, 0x80, 0xf9, 0x91, 0x88, 0x70, 0x56, 0x75, 0x31, 0x35,
	0xb4, 0x97, 0x6c, 0x33, 0x7d, 0x4d, 0xca, 0x6c, 0xf1, 0x4a, 0x6e, 0x8b, 0x5b, 0xd0, 0x4c, 0xce,
	0xaf, 0x8d, 0x6c, 0xbf, 0xcb, 0xda, 0x30, 0x0f, 0x0d, 0x3f, 0x4a, 0xd1, 0xf0, 0x81, 0x66, 0x11,
	0xd2, 0x56, 0x28, 0xfc, 0x23, 0x58, 0xd9, 0x61, 0x0b, 0x02, 0x2f, 0x3e, 0xf5, 0xc2, 0x23, 0xa1,
	0x58, 0xed, 0xa6, 0xa8, 0x69, 0xbd, 0x0f, 0xa7, 0x63, 0xb5, 0x5a, 0x4e, 0x78, 0xca, 0xae, 0x79,
	0x08, 0xb9, 0x9d, 0x22, 0x24, 0x1f, 0x2a, 0x52, 0xfa, 0x15, 0x1b, 0x36, 0x10, 0x9b, 0x3a, 0xfd,
	0x03, 0x6f, 0x40, 0x13, 0xcf, 0xbf, 0xf4, 0x73, 0xce, 0xc8, 0x3d, 0xe7, 0xde, 0x85, 0x86, 0x17,
	0x2a, 0xd8, 0xa8, 0xae, 0x6e, 0x4f, 0x3a, 0xac, 0x1e, 0x6c, 0x4d, 0x5c, 0x70, 0x9f, 0x75, 0xef,
	0x8d, 0x85, 0x8a, 0x1d, 0x67, 0xfc, 0xc6, 0x7d, 0x6d, 0x00, 0x6d, 0xbd, 0x26, 0x64, 0xf8, 0x93,
	0xf4, 0x36, 0xbd, 0x90, 0x23, 0x24, 0x8f, 0x3c, 0x0a, 0xa0, 0x71, 0xa0, 0x34, 0x93, 0xef, 0xf4,
	0x6f, 0x8d, 0x62, 0x64, 0xf3, 0x2c, 0xd8, 0x2f, 0x53, 0x0b, 0x76, 0x7d, 0xca, 0x46, 0xce, 0x62,
	0x53, 0xab, 0xf7, 0x2c, 0x79, 0x02, 0x3e, 0x74, 0x5e, 0x2d, 0x82, 0xe3, 0xed, 0xe4, 0x91, 0x2d,
	0x75, 0x20, 0xbb, 0xda, 0xd7, 0xb3, 0x51, 0xf0, 0x7a, 0x4e, 0x9f, 0xd5, 0x91, 0xa5, 0x8b, 0x3d,
	0xab, 0x27, 0xb6, 0x2a, 0xb6, 0x7a, 0xb0, 0xb5, 0x17, 0x6e, 0x8f, 0x82, 0x80, 0xfa, 0xfc, 0x89,
	0xe7, 0xbb, 0xec, 0xeb, 0x45, 0xc5, 0xc0, 0x1f, 0x43, 0x5b, 0xaf, 0x29, 0xca, 0x9f, 0x45, 0x7b,
	0x47, 0x6e, 0xff, 0xa8, 0x89, 0x0e, 0x56, 0x64, 0xe2, 0x22, 0x1c, 0xac, 0xd8, 0x48, 0x45, 0x99,
	0x87, 0x1b, 0xec, 0xa0, 0xe7, 0x85, 0x36, 0x1b, 0xf9, 0xae, 0x7a, 0x69, 0xef, 0xb3, 0x6e, 0xf8,
	0xc6, 0x39, 0x1b, 0xc1, 0xd9, 0x02, 0x55, 0x48, 0xda, 0xad, 0xf4, 0x66, 0x3e, 0x5b, 0x74, 0x11,
	0x4a, 0x6c, 0xe2, 0x0b, 0x70, 0x9a, 0x33, 0xd7, 0x19, 0x1f, 0xa6, 0x23, 0xd5, 0x0a, 0x76, 0x2a,
	0x71, 0xeb, 0x3b, 0x63, 0x0a, 0xc4, 0x79, 0x38, 0xff, 0x2c, 0xc5, 0xf9, 0x0f, 0x74, 0x0e, 0x5a,
	0x04, 0x52, 0x91, 0xfe, 0x1f, 0x03, 0x56, 0x76, 0x1d, 0xde, 0xa3, 0xc1, 0xf7, 0x9c, 0x9e, 0x39,
	0x07, 0xd0, 0x45, 0xbd, 0xb8, 0x44, 0xcb, 0xf2, 0x06, 0x25, 0x7b, 0xd4, 0xe1, 0x56, 0x90, 0x79,
	0x6b, 0xc1, 0x72, 0xe0, 0xf8, 0xc7, 0x9e, 0xdf, 0x55, 0xe9, 0x96, 0xa8, 0x49, 0xb6, 0xa0, 0x3e,
	0x1a, 0x1e, 0xca, 0x2b, 0xaf, 0x4a, 0xb8, 0x8c, 0x86, 0xfb, 0x78, 0xe9, 0xa5, 0x40, 0xee, 0xba,
	0x6e, 0x12, 0xa8, 0xf0, 0xa9, 0x5b, 0xa9, 0x97, 0x40, 0x3e, 0xd9, 0x93, 0x92, 0x2f, 0xf3, 0xf0,
	0xfe, 0x1c, 0x13, 0x0d, 0xc9, 0xcf, 0x94, 0x3f, 0x9d, 0x54, 0x0f, 0xa6, 0x69, 0x73, 0x16, 0x2f,
	0x22, 0x4d, 0xab, 0xb1, 0x37, 0x0e, 0x61, 0x1b, 0xf2, 0xc1, 0xbe, 0x70, 0xda, 0xae, 0x46, 0x39,
	0x88, 0x1c, 0x73, 0xd9, 0x8b, 0xcb, 0x1f, 0x0d, 0xbd, 0x51, 0xf3, 0x30, 0xf3, 0xf3, 0x14, 0x33,
	0x57, 0x0a, 0xb2, 0x15, 0x05, 0xe4, 0xdc, 0x03, 0xb2, 0x43, 0xfb, 0x59, 0x66, 0x4e, 0x96, 0xab,
	0xb8, 0x84, 0x29, 0x88, 0x99, 0x98, 0x85, 0x2b, 0xe4, 0x74, 0x2d, 0xc2, 0x15, 0x34, 0xc6, 0x28,
	0xb4, 0xbf, 0x85, 0x0d, 0xf9, 0x66, 0x7f, 0x2d, 0xc0, 0x85, 0x79, 0x8a, 0xab, 0x51, 0xee, 0xa1,
	0xd4, 0xfa, 0xeb, 0x2c, 0x59, 0xc4, 0xfa, 0xeb, 0x4d, 0x8a, 0x93, 0x55, 0x64, 0x97, 0xf2, 0x59,
	0x74, 0xa4, 0x83, 0x9c, 0x99, 0x09, 0x72, 0x22, 0x5c, 0x64, 0x26, 0x79, 0x9d, 0x70, 0x91, 0xb3,
	0x67, 0x41, 0x55, 0x9d, 0x42, 0x46, 0xd6, 0xc4, 0xeb, 0x3a, 0x4b, 0xc9, 0xc9, 0x92, 0x13, 0x7f,
	0x51, 0xa9, 0x80, 0x1c, 0x27, 0x77, 0xd2, 0x47, 0xf2, 0x0c, 0x52, 0xde, 0x58, 0x6a, 0x42, 0xdc,
	0x25, 0xf3, 0xa8, 0x16, 0x71, 0x97, 0xd4, 0xa1, 0x56, 0xcc, 0x7e, 0x67, 0x42, 0x43, 0x0e, 0xbd,
	0x99, 0x4a, 0x50, 0xe2, 0x6c, 0xad, 0xa5, 0xcf, 0xd6, 0xb4, 0xbf, 0x2e, 0x65, 0x0f, 0xe5, 0x0f,
	0x60, 0x45, 0x0d, 0xbf, 0x74, 0xfa, 0x23, 0xaa, 0xca, 0x42, 0xa7, 0x64, 0xdf, 0xaf, 0x45, 0x17,
	0xb9, 0x09, 0x26, 0x1b, 0xaa, 0xea, 0xc9, 0xf9, 0x82, 0x45, 0x8a, 0xcb, 0x82, 0xb6, 0xc9, 0x86,
	0x42, 0xe7, 0xc8, 0xf7, 0x5e, 0x8c, 0xe8, 0x21, 0x77, 0xba, 0xaa, 0x76, 0xd4, 0x90, 0x3d, 0x07,
	0x4e, 0x77, 0x92, 0x4a, 0x81, 0x64, 0x2a, 0xe5, 0xef, 0x06, 0x80, 0x9c, 0x0c, 0xb3, 0x35, 0xff,
	0x47, 0x4e, 0x9a, 0x50, 0xf1, 0x47, 0x03, 0xa4, 0xa2, 0x66, 0x8b, 0x9f, 0xd6, 0xbf, 0x0d, 0x58,
	0x7f, 0xc8, 0x5c, 0xef, 0x68, 0xbc, 0x3b, 0x21, 0x46, 0x7f, 0x85, 0x9d, 0x1e, 0x1f, 0x72, 0x7c,
	0x57, 0xf2, 0x7c, 0xaf, 0x41, 0x6d, 0x74, 0xd8, 0x67, 0x5d, 0xc4, 0xd2, 0xb0, 0xab, 0x23, 0xe1,
	0x22, 0x72, 0x11, 0x6a, 0x27, 0x58, 0x84, 0x98, 0xe5, 0xa5, 0x04, 0xcb, 0x49, 0x52, 0x96, 0x53,
	0xa4, 0x58, 0x57, 0x60, 0x23, 0x07, 0x51, 0x1b, 0xb0, 0xbf, 0xd1, 0x93, 0xb1, 0x88, 0xdc, 0x9e,
	0xd6, 0x20, 0xb5, 0x85, 0x5c, 0x99, 0x60, 0x93, 0x0f, 0x90, 0x89, 0xe3, 0x9c, 0xf4, 0x61, 0x91,
	0x5e, 0xaf, 0x4a, 0x36, 0x9e, 0x7f, 0x0a, 0x2d, 0x9d, 0x16, 0x24, 0x66, 0xf6, 0x5a, 0x5a, 0x7f,
	0x36, 0x8a, 0xac, 0x9c, 0x87, 0xae, 0x4f, 0x53, 0x74, 0x7d, 0xa8, 0x7d, 0xbc, 0xea, 0x2c, 0x8d,
	0x5f, 0x63, 0xef, 0xde, 0x73, 0x78, 0xa7, 0x37, 0x93, 0xb6, 0xca, 0x6b, 0xd3, 0x66, 0xc3, 0xb9,
	0x42, 0x55, 0xe5, 0xde, 0x63, 0x09, 0xd3, 0x54, 0x12, 0xf4, 0x6f, 0xc6, 0x54, 0xfb, 0xe7, 0x21,
	0xf4, 0x5e, 0x8a, 0xd0, 0x1b, 0x39, 0x23, 0xa6, 0x62, 0x50, 0xac, 0x3a, 0x98, 0xe0, 0x38, 0x10,
	0x8f, 0xc2, 0x38, 0xa2, 0xbf, 0x61, 0x27, 0xfc, 0xd6, 0x80, 0x8d, 0x9c, 0x8e, 0x72, 0xa9, 0xe4,
	0x89, 0x49, 0xea, 0x00, 0x25, 0x50, 0x75, 0x5c, 0x37, 0x54, 0x16, 0xe0, 0x6f, 0x11, 0x2a, 0x06,
	0x9e, 0x3f, 0x0a, 0x95, 0x07, 0xcb, 0x86, 0x78, 0x7b, 0xc9, 0xf7, 0x6f, 0xbf, 0xa3, 0x1e, 0x82,
	0xcb, 0xd8, 0xde, 0xef, 0x60, 0x08, 0xd0, 0x80, 0x5e, 0x44, 0x08, 0xd0, 0xe2, 0x96, 0xd4, 0x5f,
	0xfb, 0x09, 0xac, 0x24, 0x2b, 0xfe, 0xa4, 0x01, 0xb5, 0x47, 0x6c, 0x7b, 0x6f, 0xbb, 0xf9, 0x16,
	0x59, 0x86, 0xca, 0x8e, 0x33, 0x6e, 0x1a, 0xa4, 0x0e, 0xd5, 0x27, 0x94, 0x1e, 0x37, 0x4d, 0x31,
	0xfa, 0x90, 0xf9, 0xbc, 0xd7, 0xac, 0x5c, 0xbb, 0x15, 0x7f, 0x88, 0x55, 0xff, 0xe8, 0xc3, 0x83,
	0xe6, 0x5b, 0x04, 0x60, 0x69, 0x9f, 0xb1, 0x90, 0xfa, 0x4d, 0x43, 0xfc, 0x7e, 0xcc, 0x03, 0xaf,
	0xc3, 0x9b, 0xe6, 0xb5, 0x8f, 0xe1, 0x4c, 0x26, 0xca, 0x8a, 0xa9, 0x1f, 0xb1, 0xdd, 0x2f, 0xa5,
	0xb6, 0xbb, 0xae, 0xdb, 0x34, 0x50, 0x87, 0x20, 0xaf, 0x69, 0xde, 0xfe, 0xef, 0x1a, 0x6c, 0x66,
	0xfe, 0xf9, 0xf5, 0x98, 0x06, 0x2f, 0xbd, 0x0e, 0x15, 0x98, 0xef, 0x77, 0x7a, 0x8c, 0xb4, 0xb4,
	0xff, 0xaf, 0xb2, 0xe9, 0x8b, 0x76, 0xd1, 0x48, 0x48, 0x3e, 0x83, 0x25, 0xf9, 0x3f, 0x26, 0xd2,
	0x2e, 0xf8, 0x83, 0x93, 0xf8, 0xbe, 0x78, 0x2c, 0x24, 0xbf, 0x81, 0x33, 0x99, 0x3f, 0xf2, 0x90,
	0x0b, 0xb3, 0xfe, 0xea, 0x23, 0xe6, 0x2c, 0x21, 0x14, 0x92, 0xa7, 0xd0, 0xcc, 0x56, 0xcc, 0xc9,
	0xc5, 0x99, 0x45, 0x75, 0x31, 0x7d, 0x19, 0xa9, 0x90, 0x74, 0x61, 0x4d, 0x53, 0x72, 0x26, 0x57,
	0xca, 0x14, 0xa6, 0x85, 0x96, 0x92, 0x82, 0x08, 0x24, 0x5b, 0xe6, 0x25, 0x17, 0x67, 0x56, 0x82,
	0xf5, 0x40, 0x74, 0x55, 0xe9, 0x2e, 0xac, 0x69, 0x6a, 0xa6, 0xe4, 0x4a, 0x99, 0xca, 0xaa, 0x1e,
	0x48, 0x41, 0xad, 0xf7, 0x29, 0x34, 0xb3, 0x05, 0x48, 0x72, 0x71, 0x66, 0x8d, 0x52, 0x0f, 0x44,
	0x57, 0x2f, 0x75, 0xe0, 0xed, 0x5c, 0x09, 0x8e, 0x5c, 0x9a, 0x5d, 0xa6, 0x13, 0x1a, 0x4a, 0x89,
	0x21, 0x57, 0x9a, 0xa2, 0x94, 0x86, 0x2b, 0x7d, 0x2d, 0xae, 0x5d, 0x52, 0x30, 0x24, 0x36, 0xac,
	0x24, 0xcb, 0x3e, 0xe4, 0xfc, 0xd4, 0xaa, 0x90, 0x98, 0x7a, 0x96, 0x44, 0x48, 0xf6, 0xa0, 0x11,
	0x57, 0x4e, 0xc8, 0xb9, 0xe2, 0xaa, 0x8a, 0x98, 0x6d, 0xea, 0x70, 0x48, 0x86, 0xc9, 0x2a, 0x60,
	0x32, 0xa7, 0x4f, 0xae, 0x95, 0x4c, 0xfe, 0x0b, 0x25, 0xe5, 0x65, 0x33, 0xce, 0x23, 0x33, 0xe2,
	0x53, 0x9d, 0x27, 0x2e, 0x22, 0xb4, 0xcb, 0x48, 0x21, 0x22, 0x7d, 0x12, 0x59, 0x83, 0xa8, 0x30,
	0xf9, 0xde, 0x2e, 0x2f, 0x1b, 0x92, 0x10, 0x2f, 0x64, 0xba, 0x14, 0x2a, 0xb9, 0x5e, 0x36, 0xd9,
	0x2a, 0x74, 0x9e, 0x40, 0x18, 0x43, 0x6e, 0x26, 0x29, 0xa7, 0x09, 0xb9, 0xf9, 0x6c, 0x66, 0xbb,
	0x84, 0x50, 0x48, 0x5c, 0x20, 0xf9, 0xbc, 0x16, 0xb9, 0x5c, 0x22, 0xf9, 0x25, 0x54, 0x94, 0x93,
	0x43, 0x08, 0x99, 0x64, 0x92, 0x06, 0x42, 0x3e, 0x7f, 0xd6, 0x2e, 0x21, 0x84, 0x10, 0xf2, 0xa9,
	0x19, 0x0d, 0x04, 0x6d, 0xc6, 0xaa, 0x5d, 0x4e, 0x2e, 0x3a, 0xf8, 0x66, 0x40, 0xc8, 0xa7, 0x80,
	0xda, 0x25, 0x84, 0x70, 0xa7, 0x64, 0xdf, 0xfb, 0x9a, 0x9d, 0xa2, 0x49, 0xa7, 0xb4, 0xcb, 0x48,
	0x61, 0x98, 0xcd, 0xbd, 0x86, 0x34, 0x61, 0x56, 0xf7, 0x4a, 0x6d, 0x97, 0x12, 0x0b, 0xc9, 0x73,
	0x59, 0xaa, 0xcb, 0xde, 0x75, 0xc9, 0xd5, 0x52, 0x0f, 0x0d, 0xa1, 0xa8, 0xac, 0x64, 0x48, 0xc6,
	0xb0, 0x55, 0x78, 0xb9, 0x26, 0x1f, 0x95, 0xbf, 0x88, 0x0b, 0xad, 0x27, 0x12, 0x47, 0x26, 0x73,
	0x97, 0x4a, 0x72, 0x69, 0xf6, 0xc5, 0x53, 0xcf, 0xa4, 0xee, 0x1a, 0xfc, 0x6c, 0x09, 0xff, 0xc1,
	0x7f, 0xe7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x18, 0x79, 0x22, 0x50, 0xfb, 0x2f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestCaseServiceClient is the client API for TestCaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestCaseServiceClient interface {
	Echo(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoRes, error)
	HotFix(ctx context.Context, in *HotFixReq, opts ...grpc.CallOption) (*HotFixRes, error)
}

type testCaseServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestCaseServiceClient(cc *grpc.ClientConn) TestCaseServiceClient {
	return &testCaseServiceClient{cc}
}

func (c *testCaseServiceClient) Echo(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoRes, error) {
	out := new(EchoRes)
	err := c.cc.Invoke(ctx, "/testcase.TestCaseService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testCaseServiceClient) HotFix(ctx context.Context, in *HotFixReq, opts ...grpc.CallOption) (*HotFixRes, error) {
	out := new(HotFixRes)
	err := c.cc.Invoke(ctx, "/testcase.TestCaseService/HotFix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestCaseServiceServer is the server API for TestCaseService service.
type TestCaseServiceServer interface {
	Echo(context.Context, *EchoReq) (*EchoRes, error)
	HotFix(context.Context, *HotFixReq) (*HotFixRes, error)
}

// UnimplementedTestCaseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTestCaseServiceServer struct {
}

func (*UnimplementedTestCaseServiceServer) Echo(ctx context.Context, req *EchoReq) (*EchoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedTestCaseServiceServer) HotFix(ctx context.Context, req *HotFixReq) (*HotFixRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotFix not implemented")
}

func RegisterTestCaseServiceServer(s *grpc.Server, srv TestCaseServiceServer) {
	s.RegisterService(&_TestCaseService_serviceDesc, srv)
}

func _TestCaseService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCaseServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testcase.TestCaseService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCaseServiceServer).Echo(ctx, req.(*EchoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestCaseService_HotFix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotFixReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCaseServiceServer).HotFix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testcase.TestCaseService/HotFix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCaseServiceServer).HotFix(ctx, req.(*HotFixReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestCaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testcase.TestCaseService",
	HandlerType: (*TestCaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _TestCaseService_Echo_Handler,
		},
		{
			MethodName: "HotFix",
			Handler:    _TestCaseService_HotFix_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "TestCase.proto",
}
